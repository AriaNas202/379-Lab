	.data

	.global prompt
	.global mydata
	.global	flagPause
	.global flagDirection
	.global flagScore
	.global flagLoss
	.global flagX
	.global flagY
	.global board


board:

    .string "----------------------", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|         *          |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "|                    |", 0xA, 0xD
    .string "----------------------", 0xA, 0xD, 0x0


prompt:	.string "Your prompt with instructions is place here", 0
mydata:	.byte	0x20	; This is where you can store data.
			; The .byte assembler directive stores a byte
			; (initialized to 0x20 in this case) at the label
			; mydata.  Halfwords & Words can be stored using the
			; directives .half & .word
flagPause: .word	0x00
flagDirection: .word		0x00
flagScore: .word		0x00
flagLoss: .word			0x00
flagX: .word		0xA
flagY: .word		0xA

	.text

	.global uart_interrupt_init
	.global gpio_interrupt_init
	.global UART0_Handler
	.global Switch_Handler
	.global Timer_Handler		; This is needed for Lab #6
	.global simple_read_character	; read_character modified for interrupts
	.global output_character	; This is from your Lab #4 Library
	.global read_string		; This is from your Lab #4 Library
	.global output_string		; This is from your Lab #4 Library
	.global uart_init		; This is from your Lab #4 Library
	.global lab6

ptr_to_prompt:		.word prompt
ptr_to_mydata:		.word mydata
ptr_to_flagPause:	.word flagPause
ptr_to_flagDirection:	.word flagDirection
ptr_to_flagScore:		.word flagScore
ptr_to_flagLoss:	.word flagLoss
ptr_to_flagX:		.word flagX
ptr_to_flagY:		.word flagY
ptr_to_board:		.word board

lab6:				; This is your main routine which is called from
				; your C wrapper.
	PUSH {r4-r12,lr}   	; Preserve registers to adhere to the AAPCS
	ldr r4, ptr_to_prompt
	ldr r5, ptr_to_mydata


 	bl uart_init
	bl uart_interrupt_init
	bl gpio_interrupt_init

	;prints BOARD
	ldr r0, ptr_to_board
	bl output_string

Infin:
	ldr r4, ptr_to_flagLoss
	ldr r4, [r4] ;loss flag in r4

	CMP r4, #1
	BEQ EndGame
	B Infin

EndGame:






	POP {lr}		; Restore registers to adhere to the AAPCS
	MOV pc, lr



uart_interrupt_init:

	; Your code to initialize the UART0 interrupt goes here

	;Set UART Interrupt Mask Reg
	MOV r0, #0xC000
	MOVT r0, #0x4000
	LDR r1, [r0, #0x038]

	ORR r1,r1, #0x10	;set 5th bit

	STR r1, [r0, #0x038]


	;Config Processor to Allow UART Interrupts
	MOV r0, #0xE000
	MOVT r0, #0xE000
	LDR r1, [r0, #0x100]

	ORR r1,r1,#0x20

	STR r1, [r0, #0x100]

	MOV pc, lr


gpio_interrupt_init:

	;Init for Tiva Functions (Port F)

    ;SETUP Enable Clock (Port F, 5th bit)
    MOV r1, #0xE608
    MOVT r1, #0x4000      ;put clock register in r1
    ADD r1, #0xF0000
    LDR r2, [r1]        ;loads current clock info into r2
    ORR r2, r2, #0x20       ;Ors the clock value with mask to set 5th bit to 1
    STR r2, [r1]        ;store new clock with Port F enabled

    ;Port F, Pin 4 (input)
    ;Port F, Pin 1,2,3
    ;Enable Direction for Pins (offset 0x400)
    MOV r1, #0x5000
    MOVT r1, #0x4002        ;Move base address for Port F in r1
    LDR r2, [r1, #0x400]    ;load pin direction register into r2

    BIC r2, r2, #0x10             ;sets 5th bit to input (Pin 4)
    ORR r2,r2, #0xE ;sets 1,2,3 bit to 1 (output)
    STR r2, [r1, #0x400]    ;stores the masked value back in directional register

     ;Set as Digital
    LDR r2, [r1, #0x51C]    ;Loads Digital Mode Register into r2
    ORR r2, r2, #0x10            ;sets 5th Bit with Mask to 1 (Enables Digital Mode)
    ORR r2,r2, #0xE ;set 1,2,3 bit to 1
    STR r2, [r1, #0x51C]    ;stores masked register back

    ;Pull up reg
    LDR r2, [r1, #0x510]
    ORR r2, r2, #0x10             ;sets 5th bit to 1 (Pin 4)
    STR r2, [r1, #0x510]






    ;Init for GPIO Interrupt

    ;Config For Edge Level Sensitivity
    MOV r0, #0x5000
    MOVT r0, #0x4002
    LDR r1, [r0, #0x404]

    BIC r1,r1,#0x10

    STR r1, [r0, #0x404]



    ;Select Single Edge Trigger
    MOV r0, #0x5000
    MOVT r0, #0x4002
    LDR r1, [r0, #0x408]

    BIC r1,r1,#0x10

    STR r1, [r0, #0x408]

    ;Select Falling  Edge Direction
    MOV r0, #0x5000
    MOVT r0, #0x4002
    LDR r1, [r0, #0x40C]

    BIC r1,r1,#0x10

    STR r1, [r0, #0x40C]

    ;Config GPIO To allow Interrupts
    MOV r0, #0x5000
    MOVT r0, #0x4002
    LDR r1, [r0, #0x410]

    ORR r1,r1,#0x10

    STR r1, [r0, #0x410]

    ;Config Processor to Allow Interrupts from GPIO
    MOV r0, #0xE000
    MOVT r0, #0xE000
    LDR r1, [r0,#0x100]

    ORR r1,r1,#0x40000000

    STR r1, [r0,#0x100]

    ;Connect Clock to timer
    MOV r0, #0xE000
    MOVT r0, #0x400F
    LDR r1, [r0, #0x604]

    ORR r1, r1, #0x1

    STR r1, [r0, #0x604]

    ;Disable timer
    MOV r0, #0x0000
    MOVT r0, #0x4003

    LDR r1, [r0, #0xC]
    BIC r1, r1, #0x1

    STR r1, [r0, #0xC]

    ;Put timer in 32 bit mode
    MOV r0, #0x0000
    MOVT r0, #0x4003

    LDR r1, [r0]

    BIC r1, r1, #0x7

    STR r1, [r0]

    ;Put timer in periodic mode
    MOV r0, #0x0000
    MOVT r0, #0x4003

    LDR r1, [r0, #0x4]
    BIC r1, r1, #0x1
    ORR r1, r1, #0x2

    STR r1, [r0, #0x4]

    ;Set up interval period
    MOV r0, #0x0000
    MOVT r0, #0x4003

    LDR r1, [r0, #0x028]

    MOV r1, #0x2400
    MOVT r1, #0x00F4

	STR r1, [r0, #0x028]

    ;Enable timer to interrupt processor
	MOV r0, #0x0000
    MOVT r0, #0x4003

    LDR r1, [r0, #0x018]

    ORR r1, r1, #0x01

    STR r1, [r0, #0x018]

    ;Configure processer to allow interrupts
    MOV r0, #0xE000
    MOVT r0, #0xE000

    LDR r1, [r0, #0x100]

    ORR r1, r1, #0x80000

    STR r1, [r0, #0x100]

	;Enable timer
	MOV r0, #0x0000
    MOVT r0, #0x4003

    LDR r1, [r0, #0xC]

    ORR r1, r1, #0x1

    STR r1, [r0, #0xC]

	MOV pc, lr



UART0_Handler:
	PUSH {r4-r12,lr} ; Spill registers to stack

	; Your code for your UART handler goes here.
	; Remember to preserver registers r4-r12 by pushing then popping
	; them to & from the stack at the beginning & end of the handler

	;Clear the interrupt
    MOV r2, #0xC000
    MOVT r2, #0x4000
    LDR r3, [r2, #0x044]

    ldr r4, ptr_to_flagDirection		;load address to flag
    ldr r5, [r4]				;load content of flag

    bl simple_read_character

    CMP r0, #'w'
    BEQ setw
    CMP r0, #'a'
    BEQ seta
    CMP r0, #'s'
    BEQ sets
    CMP r0, #'d'
    BEQ setd
    B invalidchar

setw:
	MOV r5, #0x0
	str r5, [r4]
	B invalidchar
seta:
	MOV r5, #0x1
	str r5, [r4]
	B invalidchar

sets:
	MOV r5, #0x02
	str r5, [r4]
	B invalidchar

setd:
	MOV r5, #0x3
	str r5, [r4]
	B invalidchar

invalidchar:



	POP {r4-r12,lr}   ; Restore registers from stack
	BX lr       	; Return


Switch_Handler:
	PUSH {r4-r12,lr} ; Spill registers to stack

	; Your code for your UART handler goes here.
	; Remember to preserver registers r4-r12 by pushing then popping
	; them to & from the stack at the beginning & end of the handler

	;Clear the interrupt
	MOV r2, #0x5000
    MOVT r2, #0x4002
    LDR r3, [r2, #0x041C]

    ORR r3, #0x10

    STR r3, [r2, #0x041C]

    ldr r4, ptr_to_flagPause	;load the flag

    ldr r0, [r4]				; loads content into r0

    EOR r0, r0, #0x1

    STR r0, [r4]



	POP {r4-r12,lr}   ; Restore registers from stack
	BX lr       	; Return


Timer_Handler:

	; Your code for your Timer handler goes here.  It is not needed for
	; Lab #5, but will be used in Lab #6.  It is referenced here because
	; the interrupt enabled startup code has declared Timer_Handler.
	; This will allow you to not have to redownload startup code for
	; Lab #6.  Instead, you can use the same startup code as for Lab #5.
	; Remember to preserver registers r4-r12 by pushing then popping
	; them to & from the stack at the beginning & end of the handler.
	PUSH {r4-r12,lr} ; Spill registers to stack

	MOV r0, #0x0000
	MOVT r0, #0x4003

	LDRB r1, [r0, #0x24]

	ORR r1, r1, #0x1

	STRB r1, [r0, #0x24]

	;get Board
	ldr r4, ptr_to_board

	;get x
	ldr r5, ptr_to_flagX
	LDR r5, [r5]

	;get y
	ldr r6, ptr_to_flagY
	LDR r6, [r6]

	;increment board address to current char
	ADD r4, r4, r5 ;add x
	MOV r7, #24 ;move 24 into r7
	MUL r6,r6,r7  ;multiply y coordinate by 24 (24 chars per line)
	ADD r4, r4, r6 ;add y

	;Get the direction
	ldr r8, ptr_to_flagDirection
	LDR r8, [r8]

	;write x to the current position
	MOV r0, #0x58
	bl addBoard

	;Get score
	ldr r9, ptr_to_flagScore
	LDR r10, [r9]

	;Increment score
	ADD r10, r10, #1

	STR r10, [r9]

	;Is direction going up?
	CMP r8, #0
	BEQ GoUp

	;Is direction going left?
	CMP r8, #1
	BEQ GoLeft

	;Is direction going down?
	CMP r8, #2
	BEQ GoDown

	;If we made it here direction is going right
	b GoRight

	;Increment according to direction
GoUp:
	SUB r6, r6, #1
	LDR r9, ptr_to_flagY

	STR r6, [r9]
	b IsValid

GoLeft:
	SUB r5, r5, #1
	LDR r9, ptr_to_flagX

	STR r5, [r9]
	b IsValid

GoDown:
	ADD r6, r6, #1
	LDR r9, ptr_to_flagY

	STR r6, [r9]
	b IsValid

GoRight:
	ADD r5, r5, #1
	LDR r9, ptr_to_flagX

	STR r5, [r9]

IsValid:
	bl readBoard

	CMP r0, #' '     ;Is the char a space, if yes it is valid, go to YesValid
	BEQ YesValid

	LDR r9, ptr_to_flagLoss		;If we made it here, char is not equal to space so they lost

	MOV r10, #1

	STR r10, [r9]		;Store 1 to Loss Flag

	B EndTimeHandler

YesValid:
	MOV r0, #'*'
	bl addBoard			;Print curser in new location


EndTimeHandler:

	MOV r0, #0xC			;clear the screen
	bl output_character

	ldr r0, ptr_to_board
	bl output_string


	POP {r4-r12,lr}   ; Restore registers from stack
	BX lr       	; Return


simple_read_character:
	PUSH {r4-r12,lr} ; Spill registers to stack

    MOV r4, #0xC000     ;UART base address
    MOVT r4, #0x4000
    LDRB r5, [r4, #0x18] ;Load from memory
    LDRB r0, [r4]       ;Store in r0

	POP {r4-r12,lr}   ; Restore registers from stack

	MOV pc, lr	; Return



addBoard:
	PUSH {r4-r12,lr} ; Spill registers to stack

	;argument r0- char to write


	;get Board
	ldr r4, ptr_to_board

	;get x
	ldr r5, ptr_to_flagX
	LDR r5, [r5]

	;get y
	ldr r6, ptr_to_flagY
	LDR r6, [r6]

	;increment board address to current char
	ADD r4, r4, r5 ;add x
	MOV r7, #24 ;move 24 into r7
	MUL r6,r6,r7  ;multiply y coordinate by 24 (24 chars per line)
	ADD r4, r4, r6 ;add y

	;r4 at base address of current char
	STRB r0, [r4] ; store single byte of r0,






	POP {r4-r12,lr}   ; Restore registers from stack

	MOV pc, lr	; Return

readBoard:
	PUSH {r4-r12,lr} ; Spill registers to stack

	;argument r0- char to write


	;get Board
	ldr r4, ptr_to_board

	;get x
	ldr r5, ptr_to_flagX
	LDR r5, [r5]

	;get y
	ldr r6, ptr_to_flagY
	LDR r6, [r6]

	;increment board address to current char
	ADD r4, r4, r5 ;add x
	MOV r7, #24 ;move 24 into r7
	MUL r6,r6,r7  ;multiply y coordinate by 24 (24 chars per line)
	ADD r4, r4, r6 ;add y

	;r4 at base address of current char
	LDRB r0, [r4] ; store single byte of r0,

	POP {r4-r12,lr}   ; Restore registers from stack
	MOV pc, lr


	.end
